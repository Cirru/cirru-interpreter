// Generated by CoffeeScript 1.6.3
var error, log_error, print, stringify, type,
  __slice = [].slice;

error = require('cirru-parser').error;

exports.type = type = function(x) {
  return Object.prototype.toString.call(x).slice(1, -1).split(' ')[1].toLowerCase();
};

exports.stringify = stringify = function(object) {
  return JSON.stringify(object, null, 2);
};

exports.print = print = function() {
  var xs;
  xs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return console.log.apply(console, xs);
};

exports.log_error = log_error = function(token, message) {
  var options;
  options = {
    text: message,
    x: token.x,
    y: token.y,
    file: token.file
  };
  return print(error(options));
};

exports.prelude = {
  number: function(scope, list) {
    var number, x;
    if (!((list != null) && (list[1] != null))) {
      log_error(list[0], 'need number here');
    }
    x = list[1];
    number = parseInt(x.text);
    if (isNaN(number)) {
      return log_error(x, "" + (stringify(x.text)) + " is not valid number");
    } else {
      return number;
    }
  },
  bool: function(scope, list) {
    var x, _ref, _ref1;
    if (!((list != null) && (list[1] != null))) {
      log_error(list[0], 'need bool symbol here');
    }
    x = list[1];
    if ((_ref = x.text) === 'yes' || _ref === 'true' || _ref === 'on' || _ref === 'ok' || _ref === 'right') {
      return true;
    } else if ((_ref1 = x.text) === 'no' || _ref1 === 'false' || _ref1 === 'off' || _ref1 === 'wrong') {
      return false;
    } else {
      return log_error(x, "" + (stringify(x.text)) + " is not a valid bool");
    }
  },
  string: function(scope, list) {
    var x;
    if (!((list != null) && (list[1] != null))) {
      log_error(list[0], 'need string here');
    }
    x = list[1];
    return list[1].text;
  }
};
