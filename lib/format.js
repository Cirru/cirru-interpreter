// Generated by CoffeeScript 1.6.3
var clc, dedent, empty_line, indent, line_head, log_indentation, match, moment, newline, type, util, write, write_char, write_string,
  __slice = [].slice;

clc = require('cli-color');

util = require('util');

moment = require('moment');

match = require('coffee-pattern').match;

type = require('./tool').type;

line_head = true;

empty_line = false;

log_indentation = '';

newline = function() {
  util.print('\n');
  util.print(log_indentation);
  empty_line = line_head === true;
  return line_head = true;
};

indent = function() {
  return log_indentation += '  ';
};

dedent = function() {
  return log_indentation = log_indentation.slice(0, -2);
};

write_char = function(item) {
  util.print(item);
  line_head = false;
  return empty_line = false;
};

write_string = function(item) {
  if (!line_head) {
    util.print(' ');
  }
  return write_char(item);
};

write = function(item) {
  var the_type;
  the_type = type(item);
  return match(the_type, {
    number: function() {
      return write_string(clc.blue(item));
    },
    string: function() {
      var quote, text;
      text = clc.black.bgYellow(item);
      quote = clc.yellow('"');
      return write_string(quote + text + quote);
    },
    regexp: function() {
      return write_string(clc.xterm(32)(item));
    },
    "null": function() {
      return write_string(clc.xterm(130)('nil'));
    },
    date: function() {
      var time;
      time = moment(item).format('YYYY MM-DD HH:mm');
      return write_string(clc.bgXterm(20).xterm(39)(time));
    },
    error: function() {
      return write_string(clc.bgXterm(130).black(item));
    },
    array: function() {
      var value, _i, _len;
      if (!(empty_line || line_head)) {
        newline();
      }
      write_char(clc.xterm(22)('⤷'));
      indent();
      for (_i = 0, _len = item.length; _i < _len; _i++) {
        value = item[_i];
        newline();
        write(value);
      }
      return dedent();
    },
    object: function() {
      var key, value;
      write_char(clc.xterm(22)('⤵'));
      indent();
      for (key in item) {
        value = item[key];
        if (!(empty_line || line_head)) {
          newline();
        }
        write_string(clc.bgXterm(52)(key));
        write_char(clc.xterm(52)(':'));
        write(value);
      }
      return dedent();
    }
  }, void 0, function() {
    return write_string(clc.bgXterm(153).white(item));
  });
};

exports.print = function() {
  var xs;
  xs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  log_indentation = '';
  if (!empty_line) {
    newline();
  }
  empty_line = false;
  newline();
  xs.map(write);
  return empty_line = false;
};
