// Generated by CoffeeScript 1.6.3
var ast, error, interpret, libs, log_error, parse, prelude, print, root_scope, stringify, _ref,
  __slice = [].slice;

_ref = require('cirru-parser'), parse = _ref.parse, error = _ref.error;

libs = require('./prelude');

stringify = function(object) {
  return JSON.stringify(object, null, 2);
};

print = function() {
  var xs;
  xs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return console.log.apply(console, xs);
};

log_error = function(token, message) {
  var options;
  options = {
    text: message,
    x: token.x,
    y: token.y,
    file: token.file
  };
  return print(error(options));
};

ast = parse('./test/code.cr');

root_scope = {};

prelude = {
  number: function(scope, list) {
    var number, x;
    if ((list == null) || !list[1]) {
      log_error(list[0], 'need number here');
    }
    x = list[1];
    number = parseInt(x.text);
    if (isNaN(number)) {
      return log_error(x, "" + (stringify(x.text)) + " is not valid number");
    } else {
      return number;
    }
  }
};

interpret = function(scope, list) {
  var func;
  func = list[0].text;
  if (prelude[func] != null) {
    return prelude[func](scope, list);
  } else if (scope[func] != null) {
    return scope[func](scope, list);
  } else {
    return log_error(list[0], "can not found " + (stringify(list[0].text)));
  }
};

if (ast.errors.length > 0) {
  console.log(ast.errors.join('\n'));
} else {
  ast.tree.map(function(line) {
    var err, has_coffee;
    try {
      if (line.length > 0) {
        return interpret(root_scope, line);
      }
    } catch (_error) {
      err = _error;
      has_coffee = function(text) {
        return text.indexOf('.coffee') > 0;
      };
      return print(err.stack.split('\n').filter(has_coffee).join('\n'));
    }
  });
}
