// Generated by CoffeeScript 1.6.3
var call_stack, error, interpret, log_error, parse, prelude, print, root_scope, stringify, type, _ref, _ref1;

_ref = require('cirru-parser'), parse = _ref.parse, error = _ref.error;

_ref1 = require('./prelude'), prelude = _ref1.prelude, log_error = _ref1.log_error, print = _ref1.print, stringify = _ref1.stringify, type = _ref1.type;

root_scope = {};

call_stack = [];

exports.interpret = interpret = function(scope, list) {
  var func, options, stamp;
  options = {
    text: '',
    x: list[0].x,
    y: list[0].y,
    file: list[0].file
  };
  stamp = error(options);
  call_stack.push({
    scope: scope,
    stamp: stamp
  });
  func = list[0].text;
  if (prelude[func] != null) {
    return prelude[func](scope, list);
  } else if (scope[func] != null) {
    return scope[func](scope, list);
  } else {
    return log_error(list[0], "can not found " + (stringify(list[0].text)));
  }
};

exports.run = function(scope, ast) {
  scope = scope || root_scope;
  ast = ast || (parse('./test/code.cr'));
  if (ast.errors.length > 0) {
    return console.log(ast.errors.join('\n'));
  } else {
    return ast.tree.map(function(line) {
      var err, has_coffee;
      try {
        if (line.length > 0) {
          return interpret(scope, line);
        }
      } catch (_error) {
        err = _error;
        call_stack.map(function(record) {
          return print(record.stamp);
        });
        print('...');
        has_coffee = function(text) {
          return text.indexOf('.coffee') > 0;
        };
        return print(err.stack.split('\n').slice(0, 11).join('\n'));
      }
    });
  }
};
