// Generated by CoffeeScript 1.6.3
var call_stack, cirru_error, clc, error, fs, interpret, match, parse, prelude, print, stringify, type, util, _ref, _ref1, _ref2;

clc = require('cli-color');

_ref = require('cirru-parser'), parse = _ref.parse, error = _ref.error;

_ref1 = require('./prelude'), prelude = _ref1.prelude, cirru_error = _ref1.cirru_error;

_ref2 = require('./tool'), print = _ref2.print, stringify = _ref2.stringify, type = _ref2.type;

match = require('coffee-pattern').match;

util = require('util');

fs = require('fs');

call_stack = [];

exports.interpret = interpret = function(scope, list) {
  var func, options, stamp;
  options = {
    text: '',
    x: list[0].x,
    y: list[0].y,
    file: list[0].file
  };
  stamp = error(options);
  call_stack.unshift({
    scope: scope,
    stamp: stamp
  });
  func = list[0].text;
  if (scope[func] != null) {
    return scope[func](scope, list);
  } else if (prelude[func] != null) {
    return prelude[func](scope, list);
  } else {
    return cirru_error(list[0], "not found: " + (stringify(list[0].text)));
  }
};

exports.run = function(scope, ast) {
  var err, line, _i, _len, _ref3;
  if (ast.errors.length > 0) {
    print(ast.errors.join('\n'));
  } else {
    _ref3 = ast.tree;
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      line = _ref3[_i];
      call_stack = [];
      try {
        if (line.length > 0) {
          interpret(scope, line);
        }
      } catch (_error) {
        err = _error;
        print(clc.bgXterm(130).white("\n" + err));
        print(err.stack.split('\n').slice(1, 8).join('\n'));
        call_stack.slice(-4).map(function(record) {
          return util.print(record.stamp);
        });
        break;
      }
    }
  }
  return scope || {};
};

exports.start = function(srcpath) {
  exports.run({}, parse(srcpath));
  require('./prelude').reloading.on('reload', function() {
    console.log('\n ... Reloading From File ... \n');
    return exports.run({}, parse(srcpath));
  });
  return fs.watchFile(srcpath, {
    interval: 200
  }, function() {
    return require('./prelude').reloading.emit('reload');
  });
};

/*
//@ sourceMappingURL=main.map
*/
