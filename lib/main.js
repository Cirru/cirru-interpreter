// Generated by CoffeeScript 1.6.3
var call_stack, clc, error, interpret, log_error, match, parse, prelude, print, root_scope, stringify, type, util, _ref, _ref1, _ref2;

clc = require('cli-color');

_ref = require('cirru-parser'), parse = _ref.parse, error = _ref.error;

_ref1 = require('./prelude'), prelude = _ref1.prelude, log_error = _ref1.log_error;

_ref2 = require('./tool'), print = _ref2.print, stringify = _ref2.stringify, type = _ref2.type;

match = require('coffee-pattern').match;

util = require('util');

root_scope = {};

call_stack = [];

exports.interpret = interpret = function(scope, list) {
  var func, options, stamp;
  options = {
    text: '',
    x: list[0].x,
    y: list[0].y,
    file: list[0].file
  };
  stamp = error(options);
  call_stack.unshift({
    scope: scope,
    stamp: stamp
  });
  func = list[0].text;
  if (prelude[func] != null) {
    return prelude[func](scope, list);
  } else if (scope[func] != null) {
    return scope[func](scope, list);
  } else {
    return log_error(list[0], "can not found " + (stringify(list[0].text)));
  }
};

exports.run = function(scope, ast) {
  var err, line, _i, _len, _ref3, _results;
  if (ast.errors.length > 0) {
    return print(ast.errors.join('\n'));
  } else {
    _ref3 = ast.tree;
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      line = _ref3[_i];
      call_stack = [];
      try {
        if (line.length > 0) {
          _results.push(interpret(scope, line));
        } else {
          _results.push(void 0);
        }
      } catch (_error) {
        err = _error;
        print(clc.bgXterm(130).white("\n" + err));
        call_stack.slice(-4).map(function(record) {
          return util.print(record.stamp);
        });
        break;
      }
    }
    return _results;
  }
};

exports.start = function(srcpath) {
  return exports.run(root_scope, parse(srcpath));
};
